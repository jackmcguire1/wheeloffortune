// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WheelClient is the client API for Wheel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WheelClient interface {
	CreateWheel(ctx context.Context, in *CreateWheelReq, opts ...grpc.CallOption) (*CreateWheelResp, error)
	SpinWheel(ctx context.Context, in *SpinWheelReq, opts ...grpc.CallOption) (*SpinWheelResp, error)
	GetWheelStatus(ctx context.Context, in *WheelStatusReq, opts ...grpc.CallOption) (*WheelStatusResp, error)
	GetAllWheelNames(ctx context.Context, in *GetAllWheelnamesReq, opts ...grpc.CallOption) (*GetAllWheelnamesResp, error)
}

type wheelClient struct {
	cc grpc.ClientConnInterface
}

func NewWheelClient(cc grpc.ClientConnInterface) WheelClient {
	return &wheelClient{cc}
}

func (c *wheelClient) CreateWheel(ctx context.Context, in *CreateWheelReq, opts ...grpc.CallOption) (*CreateWheelResp, error) {
	out := new(CreateWheelResp)
	err := c.cc.Invoke(ctx, "/gopher.Wheel/CreateWheel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wheelClient) SpinWheel(ctx context.Context, in *SpinWheelReq, opts ...grpc.CallOption) (*SpinWheelResp, error) {
	out := new(SpinWheelResp)
	err := c.cc.Invoke(ctx, "/gopher.Wheel/SpinWheel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wheelClient) GetWheelStatus(ctx context.Context, in *WheelStatusReq, opts ...grpc.CallOption) (*WheelStatusResp, error) {
	out := new(WheelStatusResp)
	err := c.cc.Invoke(ctx, "/gopher.Wheel/GetWheelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wheelClient) GetAllWheelNames(ctx context.Context, in *GetAllWheelnamesReq, opts ...grpc.CallOption) (*GetAllWheelnamesResp, error) {
	out := new(GetAllWheelnamesResp)
	err := c.cc.Invoke(ctx, "/gopher.Wheel/GetAllWheelNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WheelServer is the server API for Wheel service.
// All implementations must embed UnimplementedWheelServer
// for forward compatibility
type WheelServer interface {
	CreateWheel(context.Context, *CreateWheelReq) (*CreateWheelResp, error)
	SpinWheel(context.Context, *SpinWheelReq) (*SpinWheelResp, error)
	GetWheelStatus(context.Context, *WheelStatusReq) (*WheelStatusResp, error)
	GetAllWheelNames(context.Context, *GetAllWheelnamesReq) (*GetAllWheelnamesResp, error)
	mustEmbedUnimplementedWheelServer()
}

// UnimplementedWheelServer must be embedded to have forward compatible implementations.
type UnimplementedWheelServer struct {
}

func (UnimplementedWheelServer) CreateWheel(context.Context, *CreateWheelReq) (*CreateWheelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWheel not implemented")
}
func (UnimplementedWheelServer) SpinWheel(context.Context, *SpinWheelReq) (*SpinWheelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpinWheel not implemented")
}
func (UnimplementedWheelServer) GetWheelStatus(context.Context, *WheelStatusReq) (*WheelStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWheelStatus not implemented")
}
func (UnimplementedWheelServer) GetAllWheelNames(context.Context, *GetAllWheelnamesReq) (*GetAllWheelnamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWheelNames not implemented")
}
func (UnimplementedWheelServer) mustEmbedUnimplementedWheelServer() {}

// UnsafeWheelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WheelServer will
// result in compilation errors.
type UnsafeWheelServer interface {
	mustEmbedUnimplementedWheelServer()
}

func RegisterWheelServer(s grpc.ServiceRegistrar, srv WheelServer) {
	s.RegisterService(&Wheel_ServiceDesc, srv)
}

func _Wheel_CreateWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWheelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WheelServer).CreateWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.Wheel/CreateWheel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WheelServer).CreateWheel(ctx, req.(*CreateWheelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wheel_SpinWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinWheelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WheelServer).SpinWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.Wheel/SpinWheel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WheelServer).SpinWheel(ctx, req.(*SpinWheelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wheel_GetWheelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WheelStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WheelServer).GetWheelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.Wheel/GetWheelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WheelServer).GetWheelStatus(ctx, req.(*WheelStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wheel_GetAllWheelNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWheelnamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WheelServer).GetAllWheelNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.Wheel/GetAllWheelNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WheelServer).GetAllWheelNames(ctx, req.(*GetAllWheelnamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wheel_ServiceDesc is the grpc.ServiceDesc for Wheel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wheel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gopher.Wheel",
	HandlerType: (*WheelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWheel",
			Handler:    _Wheel_CreateWheel_Handler,
		},
		{
			MethodName: "SpinWheel",
			Handler:    _Wheel_SpinWheel_Handler,
		},
		{
			MethodName: "GetWheelStatus",
			Handler:    _Wheel_GetWheelStatus_Handler,
		},
		{
			MethodName: "GetAllWheelNames",
			Handler:    _Wheel_GetAllWheelNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
